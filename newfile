// MARK: - FinalScreenType & Subtask

enum FinalScreenType: Hashable {
    case d1, d2, d3
}

enum Subtask: String, CaseIterable, Hashable {
    case profileSetup
    case permissions
    case notifications
}

// MARK: - Route

enum Route: Hashable {
    case screenA
    case screenB
    case screenC
    case screenD1
    case screenD2
    case screenD3
}

// MARK: - Coordinator

class Coordinator: ObservableObject {
    @Published var path = NavigationPath()
    @Published var taskProgress: [FinalScreenType: Set<Subtask>] = [
        .d1: [], .d2: [], .d3: []
    ]

    private var finalDestination: FinalScreenType?

    func start() {
        path = NavigationPath()
        path.append(Route.screenA)
    }

    func selectFinalScreen(_ type: FinalScreenType) {
        finalDestination = type
        path.append(Route.screenB)
    }

    func goToC() {
        path.append(Route.screenC)
    }

    func goToFinalD() {
        guard let final = finalDestination else { return }
        switch final {
        case .d1: path.append(Route.screenD1)
        case .d2: path.append(Route.screenD2)
        case .d3: path.append(Route.screenD3)
        }
    }

    func updateTask(for type: FinalScreenType, completed: Set<Subtask>) {
        taskProgress[type] = completed
        start()
    }

    func pendingTasks(for type: FinalScreenType) -> [Subtask] {
        let completed = taskProgress[type] ?? []
        return Subtask.allCases.filter { !completed.contains($0) }
    }

    func isFlowComplete(for type: FinalScreenType) -> Bool {
        return pendingTasks(for: type).isEmpty
    }
}

// MARK: - RootView

struct RootView: View {
    @StateObject var coordinator = Coordinator()

    var body: some View {
        NavigationStack(path: $coordinator.path) {
            ScreenA(type: .d1) { selected in
                coordinator.selectFinalScreen(selected)
            }
            .navigationDestination(for: Route.self) { route in
                switch route {
                case .screenA:
                    ScreenA(type: .d1) {
                        coordinator.selectFinalScreen($0)
                    }
                case .screenB:
                    ScreenB {
                        coordinator.goToC()
                    }
                case .screenC:
                    ScreenC {
                        coordinator.goToFinalD()
                    }
                case .screenD1:
                    ScreenD(type: .d1) { completed in
                        coordinator.updateTask(for: .d1, completed: completed)
                    }
                case .screenD2:
                    ScreenD(type: .d2) { completed in
                        coordinator.updateTask(for: .d2, completed: completed)
                    }
                case .screenD3:
                    ScreenD(type: .d3) { completed in
                        coordinator.updateTask(for: .d3, completed: completed)
                    }
                }
            }
        }
        .environmentObject(coordinator)
        .onAppear {
            coordinator.start()
        }
    }
}

// MARK: - ScreenA

struct ScreenA: View {
    var type: FinalScreenType
    var onButtonTap: (FinalScreenType) -> Void
    @EnvironmentObject var coordinator: Coordinator

    var body: some View {
        VStack {
            if !coordinator.isFlowComplete(for: type) {
                Button(buttonTitle) {
                    onButtonTap(type)
                }
            } else {
                Text("âœ… All steps for \(type) completed")
            }
        }
        .navigationTitle("Screen A")
    }

    var buttonTitle: String {
        let pending = coordinator.pendingTasks(for: type)
        if pending.isEmpty {
            return ""
        } else {
            let tasks = pending.map { $0.rawValue.capitalized }.joined(separator: ", ")
            return "Continue setup: \(tasks)"
        }
    }
}

// MARK: - ScreenB / ScreenC

struct ScreenB: View {
    var onNext: () -> Void
    var body: some View {
        VStack {
            Text("Screen B")
            Button("Next to C") { onNext() }
        }.navigationTitle("Screen B")
    }
}

struct ScreenC: View {
    var onNext: () -> Void
    var body: some View {
        VStack {
            Text("Screen C")
            Button("Next to Final D") { onNext() }
        }.navigationTitle("Screen C")
    }
}

// MARK: - ScreenD (Reusable)

struct ScreenD: View {
    var type: FinalScreenType
    var onComplete: (Set<Subtask>) -> Void

    @State private var completedTasks: Set<Subtask> = []

    var body: some View {
        VStack(spacing: 20) {
            ForEach(Subtask.allCases, id: \.self) { task in
                Toggle(task.rawValue.capitalized, isOn: binding(for: task))
            }
            Button("Done") {
                onComplete(completedTasks)
            }
        }
        .padding()
        .navigationTitle("Screen \(type)")
    }

    private func binding(for task: Subtask) -> Binding<Bool> {
        Binding(
            get: { completedTasks.contains(task) },
            set: { isOn in
                if isOn {
                    completedTasks.insert(task)
                } else {
                    completedTasks.remove(task)
                }
            }
        )
    }
}

// MARK: - App Entry Point

@main
struct MyApp: App {
    var body: some Scene {
        WindowGroup {
            RootView()
        }
    }
}
