Feature: Login

Scenario: User should be able to delete letters in-between value in password placeholder
    Given User enters the password "Password@123" in the password text field
    When User clicks on the 5 character in the password field
    And User deletes characters using backspace key from the keyboard
    Then Characters should get deleted
    Then User should be able to input "U" character at position 4 in the password field




import { Given, When, Then } from '@wdio/cucumber-framework';
import QuickPasswordPage from '../pageobjects/QuickPasswordPage';

Given(/^User enters the password "([^"]*)" in the password text field$/, async (password: string) => {
    await QuickPasswordPage.enterPassword(password);
});

When(/^User clicks on the (\d+) character in the password field$/, async (position: number) => {
    await QuickPasswordPage.clickCharacterAtPosition(position);
});

When(/^User deletes characters using backspace key from the keyboard$/, async () => {
    await QuickPasswordPage.deleteCharacter();
});

Then(/^Characters should get deleted$/, async () => {
    let currentValue = await QuickPasswordPage.passwordField.getText();
    expect(currentValue).not.toContain('@'); // Assuming '@' is the character being deleted
});

Then(/^User should be able to input "([^"]*)" character at position (\d+) in the password field$/, async (character: string, position: number) => {
    await QuickPasswordPage.enterCharacterAtPosition(character, position);
    let currentValue = await QuickPasswordPage.passwordField.getText();
    expect(currentValue.charAt(position - 1)).toBe(character);
});



import { ChainablePromiseElement } from 'webdriverio';

class QuickPasswordPage {
    get passwordField(): ChainablePromiseElement<WebdriverIO.Element> {
        if (driver.isIOS) {
            return $('//XCUIElementTypeSecureTextField'); // iOS secure text field
        } else {
            return $('//android.widget.EditText[@password="true"]'); // Android secure field
        }
    }

    async enterPassword(password: string) {
        await this.passwordField.setValue(password);
    }

    async clickCharacterAtPosition(position: number) {
        let currentValue = await this.passwordField.getText();
        let beforeText = currentValue.substring(0, position - 1);
        await this.passwordField.setValue(beforeText); // Move cursor to position
    }

    async deleteCharacter() {
        if (driver.isIOS) {
            await driver.execute('mobile: pressButton', { name: 'delete' }); // iOS delete key
        } else {
            await driver.pressKeyCode(67); // Android Backspace keycode
        }
    }

    async enterCharacterAtPosition(character: string, position: number) {
        let currentValue = await this.passwordField.getText();
        let beforeText = currentValue.substring(0, position - 1);
        let afterText = currentValue.substring(position - 1);
        await this.passwordField.setValue(beforeText + character + afterText);
    }
}

export default new QuickPasswordPage();
