import SwiftUI

struct LoginView: View {
    @State private var password: String = ""
    @FocusState private var isPasswordFieldFocused: Bool
    @State private var keyboardHeight: CGFloat = 0
    
    var body: some View {
        VStack {
            Spacer()
            
            // App Logo
            Image("appLogo")
                .resizable()
                .frame(width: 100, height: 100)
                .padding(.bottom, 20)
            
            // Welcome Text
            Text("Welcome back, Shaik")
                .font(.title2)
                .fontWeight(.bold)
                .padding(.bottom, 5)
            
            Text("Not you?")
                .foregroundColor(.blue)
                .font(.subheadline)
            
            // Password Field
            SecureField("Enter password", text: $password)
                .focused($isPasswordFieldFocused)
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(10)
                .padding(.horizontal)
            
            // Forgot password button
            HStack {
                Spacer()
                Button("Forgot password?") {}
                    .font(.footnote)
                    .foregroundColor(.blue)
                    .padding(.trailing)
            }
            
            Spacer()
            
            // Dynamically position Login button above the keyboard
            if keyboardHeight > 0 {
                Button(action: {
                    // Handle login action
                }) {
                    Text("Login")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(password.isEmpty ? Color.gray : Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)
                }
                .disabled(password.isEmpty)
                .padding(.bottom, 10) // 12 pixels gap from the top of the keyboard
                .animation(.easeOut, value: keyboardHeight) // Smooth transition when keyboard appears
            }
            if keyboardHeight <= 0 {
                HStack(spacing: 30) {
                    Button("Scan QR code for web login") {}
                    Button("Generate token") {}
                    Button("Setup Quick Login") {}
                }
                .font(.footnote)
                .foregroundColor(.blue)
                .padding()
            }
        }
        .onTapGesture { hideKeyboard() }
        .onAppear { observeKeyboardNotifications() }
        .onDisappear { NotificationCenter.default.removeObserver(self) }
    }
    
    // Function to observe keyboard height dynamically
    func observeKeyboardNotifications() {
        NotificationCenter.default.addObserver(forName: UIResponder.keyboardWillShowNotification, object: nil, queue: .main) { notification in
            if let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect {
                withAnimation {
                    keyboardHeight = keyboardFrame.height
                }
            }
        }
        
        NotificationCenter.default.addObserver(forName: UIResponder.keyboardWillHideNotification, object: nil, queue: .main) { _ in
            withAnimation {
                keyboardHeight = 0
            }
        }
    }
}

extension View {
    func hideKeyboard() {
        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}

struct LoginView_Previews: PreviewProvider {
    static var previews: some View {
        LoginView()
    }
}
